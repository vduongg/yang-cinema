// <auto-generated />
using System;
using Cinema.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Cinema.API.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ActorMovie", b =>
                {
                    b.Property<int>("actorListactorId")
                        .HasColumnType("int");

                    b.Property<int>("moviesmovieId")
                        .HasColumnType("int");

                    b.HasKey("actorListactorId", "moviesmovieId");

                    b.HasIndex("moviesmovieId");

                    b.ToTable("ActorMovie");
                });

            modelBuilder.Entity("Cinema.API.Models.Actor", b =>
                {
                    b.Property<int>("actorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("actorId"));

                    b.Property<string>("actorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("actorId");

                    b.ToTable("actors");
                });

            modelBuilder.Entity("Cinema.API.Models.Cinema", b =>
                {
                    b.Property<int>("cinemaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("cinemaId"));

                    b.Property<string>("cinemaName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("wardId")
                        .HasColumnType("int");

                    b.HasKey("cinemaId");

                    b.HasIndex("wardId");

                    b.ToTable("Cinema");
                });

            modelBuilder.Entity("Cinema.API.Models.CinemaSesson", b =>
                {
                    b.Property<int>("cinemaSessonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("cinemaSessonId"));

                    b.Property<int>("cinemaId")
                        .HasColumnType("int");

                    b.Property<int>("movieId")
                        .HasColumnType("int");

                    b.Property<int>("roomID")
                        .HasColumnType("int");

                    b.Property<DateTime>("startedDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeOnly>("startedTime")
                        .HasColumnType("time");

                    b.HasKey("cinemaSessonId");

                    b.HasIndex("movieId");

                    b.HasIndex("roomID");

                    b.ToTable("cinemaSessons");
                });

            modelBuilder.Entity("Cinema.API.Models.City", b =>
                {
                    b.Property<int>("cityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("cityId"));

                    b.Property<string>("cityCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("cityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("cityId");

                    b.ToTable("citys");
                });

            modelBuilder.Entity("Cinema.API.Models.Country", b =>
                {
                    b.Property<int>("countryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("countryId"));

                    b.Property<string>("countryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("countryId");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("Cinema.API.Models.Director", b =>
                {
                    b.Property<int>("directorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("directorId"));

                    b.Property<string>("directorIdName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("directorId");

                    b.ToTable("directors");
                });

            modelBuilder.Entity("Cinema.API.Models.Movie", b =>
                {
                    b.Property<int>("movieId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("movieId"));

                    b.Property<int>("countryId")
                        .HasColumnType("int");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("directorId")
                        .HasColumnType("int");

                    b.Property<string>("movieName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("releaseDate")
                        .HasColumnType("datetime2");

                    b.HasKey("movieId");

                    b.HasIndex("countryId");

                    b.HasIndex("directorId");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("Cinema.API.Models.MovieType", b =>
                {
                    b.Property<int>("movieTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("movieTypeId"));

                    b.Property<string>("movieTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("movieTypeId");

                    b.ToTable("movieTypes");
                });

            modelBuilder.Entity("Cinema.API.Models.Room", b =>
                {
                    b.Property<int>("roomID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("roomID"));

                    b.Property<string>("roomName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("roomID");

                    b.ToTable("Room");
                });

            modelBuilder.Entity("Cinema.API.Models.Ward", b =>
                {
                    b.Property<int>("wardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("wardId"));

                    b.Property<int?>("cityId")
                        .HasColumnType("int");

                    b.Property<int>("wardCode")
                        .HasColumnType("int");

                    b.Property<string>("wardName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("wardId");

                    b.HasIndex("cityId");

                    b.ToTable("wards");
                });

            modelBuilder.Entity("MovieMovieType", b =>
                {
                    b.Property<int>("moviesmovieId")
                        .HasColumnType("int");

                    b.Property<int>("typeListmovieTypeId")
                        .HasColumnType("int");

                    b.HasKey("moviesmovieId", "typeListmovieTypeId");

                    b.HasIndex("typeListmovieTypeId");

                    b.ToTable("MovieMovieType");
                });

            modelBuilder.Entity("ActorMovie", b =>
                {
                    b.HasOne("Cinema.API.Models.Actor", null)
                        .WithMany()
                        .HasForeignKey("actorListactorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cinema.API.Models.Movie", null)
                        .WithMany()
                        .HasForeignKey("moviesmovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Cinema.API.Models.Cinema", b =>
                {
                    b.HasOne("Cinema.API.Models.Ward", "ward")
                        .WithMany("cinemas")
                        .HasForeignKey("wardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ward");
                });

            modelBuilder.Entity("Cinema.API.Models.CinemaSesson", b =>
                {
                    b.HasOne("Cinema.API.Models.Movie", "movie")
                        .WithMany("sessonList")
                        .HasForeignKey("movieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cinema.API.Models.Room", "room")
                        .WithMany()
                        .HasForeignKey("roomID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("movie");

                    b.Navigation("room");
                });

            modelBuilder.Entity("Cinema.API.Models.Movie", b =>
                {
                    b.HasOne("Cinema.API.Models.Country", "country")
                        .WithMany("movies")
                        .HasForeignKey("countryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cinema.API.Models.Director", "director")
                        .WithMany("movies")
                        .HasForeignKey("directorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("country");

                    b.Navigation("director");
                });

            modelBuilder.Entity("Cinema.API.Models.Ward", b =>
                {
                    b.HasOne("Cinema.API.Models.City", null)
                        .WithMany("wards")
                        .HasForeignKey("cityId");
                });

            modelBuilder.Entity("MovieMovieType", b =>
                {
                    b.HasOne("Cinema.API.Models.Movie", null)
                        .WithMany()
                        .HasForeignKey("moviesmovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cinema.API.Models.MovieType", null)
                        .WithMany()
                        .HasForeignKey("typeListmovieTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Cinema.API.Models.City", b =>
                {
                    b.Navigation("wards");
                });

            modelBuilder.Entity("Cinema.API.Models.Country", b =>
                {
                    b.Navigation("movies");
                });

            modelBuilder.Entity("Cinema.API.Models.Director", b =>
                {
                    b.Navigation("movies");
                });

            modelBuilder.Entity("Cinema.API.Models.Movie", b =>
                {
                    b.Navigation("sessonList");
                });

            modelBuilder.Entity("Cinema.API.Models.Ward", b =>
                {
                    b.Navigation("cinemas");
                });
#pragma warning restore 612, 618
        }
    }
}
